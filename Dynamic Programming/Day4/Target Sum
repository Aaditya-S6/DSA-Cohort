// You are given an integer array nums and an integer target.

// You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

// For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
// Return the number of different expressions that you can build, which evaluates to target.

 

// Example 1:

// Input: nums = [1,1,1,1,1], target = 3
// Output: 5
// Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
// -1 + 1 + 1 + 1 + 1 = 3
// +1 - 1 + 1 + 1 + 1 = 3
// +1 + 1 - 1 + 1 + 1 = 3
// +1 + 1 + 1 - 1 + 1 = 3
// +1 + 1 + 1 + 1 - 1 = 3

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        return TotalWays(nums,target,0,new HashMap<String,Integer>());
    }
    public static int TotalWays(int [] nums,int targetSum,int currentIndex,HashMap<String,Integer> memo){
        if(currentIndex==nums.length && targetSum==0){
            return 1;
        }
        if(currentIndex==nums.length && targetSum!=0){
            return 0;
        }
        String currentKey=Integer.toString(targetSum)+"-"+Integer.toString(currentIndex);
        if(memo.containsKey(currentKey)){
            return memo.get(currentKey);
        }
        int currentItem=nums[currentIndex];
        int Add=TotalWays(nums,targetSum-currentItem,currentIndex+1,memo);
        int Subtract=TotalWays(nums,targetSum+currentItem,currentIndex+1,memo);
        memo.put(currentKey,Add+Subtract);
        return Add+Subtract;
    }
}