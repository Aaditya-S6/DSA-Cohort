//You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

// You can either start from the step with index 0, or the step with index 1.

// Return the minimum cost to reach the top of the floor.

 

// Example 1:

// Input: cost = [10,15,20]
// Output: 15
// Explanation: You will start at index 1.
// - Pay 15 and climb two steps to reach the top.
// The total cost is 15.
// Example 2:

// Input: cost = [1,100,1,1,1,100,1,1,100,1]
// Output: 6
// Explanation: You will start at index 0.
// - Pay 1 and climb two steps to reach index 2.
// - Pay 1 and climb two steps to reach index 4.
// - Pay 1 and climb two steps to reach index 6.
// - Pay 1 and climb one step to reach index 7.
// - Pay 1 and climb two steps to reach index 9.
// - Pay 1 and climb one step to reach the top.
// The total cost is 6.
import java.util.*;
//At each stair i have choice of climbing one stair or two stair
//so i will make two recursive calls
// after each recursive call i will actually calculate the minimum cost among twoSteps and OneStep
public static int MinCost(int currentStair,int [] cost){
    if(currentStair==cost.length){
        return 1;
    }
    if(currentStair>cost.length){
        return 0;
    }
    int oneStep=cost[currentStair]+MinCost(currentStair+1,cost);
    int twoStep=cost[currentStair]+MinCost(currentStair+2,cost);
    return Math.min(oneStep,twoStep);
}
// This is the recursive code it can be modified using HashMapd
// while calling i will return minimum of -> when i will start from 0th stair or when
// i will start from 1st stair
public static void main(String[] args) {
    int [] cost={10,15,20};
    return Math.min(MinCost(0,cost),MinCost(1,cost));
}