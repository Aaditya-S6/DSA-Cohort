import java.util.*;
// You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

// Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

// Example 1:

// Input: nums = [1,2,3,1]
// Output: 4
// Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
// Total amount you can rob = 1 + 3 = 4.
// Example 2:

// Input: nums = [2,7,9,3,1]
// Output: 12
// Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
//  Total amount you can rob = 2 + 9 + 1 = 12.

//Intution 
// To solve this problem i will be starting from the 0th house only, The constraint here is that
// i can not rob two adjacent house
// so at any particular index i will be having two choices that are
// i can rob the house collect the money and jump to currentHouse+2
// or i can choose not to rob that house and jump to the next house that is currentHouse+1
//Whenever i will reach the last house  i will return 0 from there
// After each recursive  call i will return MAX of if i choose to rob or noRob
// I will optimise my recursive code using DP And HashMap
// So my recursive function starts here

public static void main(String[] args) {
    return HouseRob(0,nums,new HashMap<Integer,Integer>());
}
public static int HouseRob(int currentHouse,int [] nums, HashMap<Integer,Integer> memo){
    if(currentHouse>=nums.length){
        return 0;
    }
    int currentKey=currentHouse;
    if(memo.containsKey(currentKey)){
        return memo.get(currentKey);
    }
    int Rob=nums[currentHouse]+HouseRob(currentHouse+2,nums,memo);
    int NoRob=HouseRob(currentHouse+1,nums,memo);
    memo.put(currentKey,Math.max(Rob,NoRob));
    return Math.max(Rob,NoRob);
}