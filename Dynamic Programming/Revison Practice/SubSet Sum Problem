import java.util.*;
// Given an array of non-negative integers, and a value sum, determine 
//if there is a subset of the given set with sum equal to given sum. 

// Example 1:

 // Input:
// N = 6
// arr[] = {3, 34, 4, 12, 5, 2}
// sum = 9
// Output: 1 
// Explanation: Here there exists a subset with
// sum = 9, 4+3+2 = 9.
// Example 2:

// Input:
// N = 6
// arr[] = {3, 34, 4, 12, 5, 2}
// sum = 30
// Output: 0 
// Explanation: There is no subset with sum 30.

// Your Task:  
// You don't need to read input or print anything. Your task is to complete the function isSubsetSum() which takes the array arr[], its size N and an integer sum as input parameters and returns boolean value true if there exists a subset with given sum and false otherwise.
// The driver code itself prints 1, if returned value is true and prints 0 if returned value is false.
 

// Expected Time Complexity: O(sum*N)
// Expected Auxiliary Space: O(sum*N)
 

// Constraints:
// 1 <= N <= 100
// 1<= arr[i] <= 100
// 1<= sum <= 105

static Boolean isSubsetSum(int N, int arr[], int sum){
    // code here
    return SubsetSum(0,sum,arr,new HashMap<String,Boolean>());
}
public static boolean SubsetSum(int currentIndex,int targetSum,int [] arr,HashMap<String,Boolean> memo){
if(currentIndex>=arr.length){
    return false;
}
if(targetSum==0){
    return true;
}
String currentKey=Integer.toString(currentIndex)+"-"+Integer.toString(targetSum);
if(memo.containsKey(currentKey)){
    return memo.get(currentKey);
}
int currentItem=arr[currentIndex];
boolean pick=false;
if(currentItem<=targetSum){
if(SubsetSum(currentIndex+1,targetSum-currentItem,arr,memo)){
    return true;
}
}
boolean NoPick=SubsetSum(currentIndex+1,targetSum,arr,memo);
memo.put(currentKey,pick || NoPick);
return memo.get(currentKey);
}