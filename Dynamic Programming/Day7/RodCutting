//{ Driver Code Starts
import java.io.*;
import java.util.*;

class RodCutting {

    public static void main(String args[])throws IOException {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        
        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine().trim());
            String s[]=in.readLine().trim().split(" ");
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(s[i]);

            Solution ob = new Solution();
            out.println(ob.cutRod(arr, n));
        }
        out.close();
    }
}

// } Driver Code Ends




class Solution{
    public int cutRod(int price[], int n) {
        //code here
        int [][] dp=new int[price.length][n+1];
        for(int i=0;i<price.length;i++){
            for(int j=0;j<=n;j++){
                dp[i][j]=-1;
            }
        }
        return RodCutting(0,n,price,dp);
    }
    
    public static int RodCutting(int CI,int N,int [] prices, int [][] dp){
        if(CI>=prices.length){
            return 0;
        }
        if(N==0){
            return 0;
        }
        int Cut=0;
        int currentPrice=prices[CI];
        if(dp[CI][N]!=-1){
            return dp[CI][N];
        }
        if(N>=CI+1){
            Cut=currentPrice+RodCutting(CI,N-(CI+1),prices,dp);
        }
        int NoCut=RodCutting(CI+1,N,prices,dp);
        dp[CI][N]=Math.max(Cut,NoCut);
        return Math.max(Cut,NoCut);
    }
}