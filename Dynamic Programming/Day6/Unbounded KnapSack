import java.util.*;
// Given a set of N items, each with a weight and a value, represented by the array w[] 
//and val[] respectively. Also, a knapsack with weight limit W.
// The task is to fill the knapsack in such a way that we can get the maximum profit. 
//Return the maximum profit.
// Note: Each item can be taken any number of times.
// Example 1:

// Input: N = 2, W = 3
// val[] = {1, 1}
// wt[] = {2, 1}
// Output: 3
// Explanation: 
// 1.Pick the 2nd element thrice.
// 2.Total profit = 1 + 1 + 1 = 3. Also the total 
//   weight = 1 + 1 + 1  = 3 which is <= W.
 
public static void main(String[] args) {
    return UnboundedKnapSack(wt,val,0,W,new HashMap<String,Integer>());
}
public static int UnboundedKnapSack(int [] wt,int [] val,int currentIndex,int capacity,HashMap<String,Integer> memo){
    if(capacity==0 || currentIndex==wt.length){
        return 0;
    }
    int currentWeight=wt[currentIndex];
    int currentProfit=val[currentIndex];
    String currentKey=Integer.toString(currentIndex)+"-"+Integer.toString(capacity);
    if(memo.containsKey(currentKey)){
        return memo.get(currentKey);
    }
    int consider=0;
    if(capacity>=currentWeight){
            consider=currentProfit+UnboundedKnapSack(wt,val,currentIndex,capacity-currentWeight,memo);
    }
    int NotConsider=UnboundedKnapSack(wt,val,currentIndex+1,capacity,memo);
    memo.put(currentKey,Math.max(consider,NotConsider));
    return Math.max(consider,NotConsider);
}
//With HashMap, GFG is giving TLE, So instead of HashMap we will use 2D Array. 
// OK, now optimising this DP code using Array

class Solution{
    static int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
   int [][] dp=new int [N][W+1];
    for(int i=0;i<N;i++){
        for(int j=0;j<W+1;j++){
            dp[i][j]=-1;
        }
    }
    return UnboundedKnapSack(wt,val,0,W,dp);
}
public static int UnboundedKnapSack(int [] wt,int [] val,int currentIndex,int capacity,int [][] dp){
    if(capacity==0 || currentIndex==wt.length){
        return 0;
    }
    int currentWeight=wt[currentIndex];
    int currentProfit=val[currentIndex];
    if(dp[currentIndex][capacity]!=-1){
        return dp[currentIndex][capacity];
    }
    int consider=0;
    if(capacity>=currentWeight){
            consider=currentProfit+UnboundedKnapSack(wt,val,currentIndex,capacity-currentWeight,dp);
    }
    int NotConsider=UnboundedKnapSack(wt,val,currentIndex+1,capacity,dp);
    dp[currentIndex][capacity]=Math.max(consider,NotConsider);
    return dp[currentIndex][capacity];
}
}