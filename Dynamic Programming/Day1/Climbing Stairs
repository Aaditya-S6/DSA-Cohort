// You are climbing a staircase. It takes n steps to reach the top.

// Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

// Example 1:

// Input: n = 2
// Output: 2
// Explanation: There are two ways to climb to the top.
// 1. 1 step + 1 step
// 2. 2 steps
// Example 2:

// Input: n = 3
// Output: 3
// Explanation: There are three ways to climb to the top.
// 1. 1 step + 1 step + 1 step
// 2. 1 step + 2 steps
// 3. 2 steps + 1 step
class Solution {
    public int climbStairs(int n) {
        return totalways(0,n,new HashMap<Integer,Integer>());
        }
    private int totalways(int currentstair,int targetstair,HashMap<Integer,Integer> memo){
        if (currentstair==targetstair){
            return 1;
        }
        if(currentstair>targetstair)
            return 0;
        int currentkey=currentstair;
        if(memo.containsKey(currentkey))
            return memo.get(currentkey);
        int onejump=totalways(currentstair+1, targetstair,memo);
        int twojump=totalways(currentstair+2, targetstair,memo);
        memo.put(currentkey,onejump+twojump);
        return onejump+twojump;
        
    }
}